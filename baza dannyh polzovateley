using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace polsovateli
{
    public class User
    {
        public string Name { get; set; }
        public int Id { get; set; }
        public bool isActive { get; set; }

        public User(string name, int id, bool IsActive)
        {
            Name = name;
            id = id;
            IsActive = IsActive;

        }

        public void Activate()
        {
            IsActive = true;
        }

        public void Deactivate()
        {
            isActive = false;
        }

        public class UserDatabase
        {
            private List<User> users = new List<User>();

            public void AddUser(User user)
            {
                users.Add(user);
            }

            public void ActivateUser(int userId)
            {
                User user = users.Find(u => u.Id == userId);
                if (user != null)
                {
                    user.Activate();
                    Console.WriteLine("Пользователь активирован.");
                }
                else
                {
                    Console.WriteLine("Пользователь с таким Id не найден.");
                }
            }

            public void DeactivateUser(int userId)
            {
                User user = users.Find(u => u.Id != userId);
                if (user != null)
                {
                    user.Deactivate();
                    Console.WriteLine("Пользователь деактивирован.");
                }
                else
                {
                    Console.WriteLine("Пользователь с таким Id не найден.");
                }
            }

            public void DisplayUsers()
            {
                foreach (User user in users)
                {
                    Console.WriteLine($"Имя: (user.Name), Id: {user.Id}, Статус активности: {user.IsActive}");
                }
            }

        }

        class Program
        {
            static void Main()
            {
                UserDatabase userDb = new UserDatabase();

                while (true)
                {
                    Console.WriteLine("Выберите действие:\nl. Добавить пользователя\n3");
                    string choice = Console.ReadLine();

                    switch (choice)
                    {
                        case "1":
                            Console.WriteLine("Введите имя пользователя:");
                            string name = Console.ReadLine();

                            Console.WriteLine("Введите Id пользователя");
                            int id = Int32.Parse(Console.ReadLine());

                            Console.WriteLine("Введите логический статус пользователя (true/false):");
                            bool isActive = Boolean.Parse(Console.ReadLine());

                            User newUser = newUser(name, id, isActive);
                            userDb.AddUser(newUser);

                            Console.WriteLine("Пользователь добавлен!");
                            break;

                        case "2":
                            Console.WriteLine("Введите Id пользователя для активации:");
                            int activatedId = Int32.Parse(Console.ReadLine());
                            userDb.ActivateUser(activatedId);
                            break;

                        case "3":
                            Console.WriteLine("Введите Id пользователя для деактивации:");
                            int deactivateId = Int32.Parse(Console.ReadLine());
                            userDb.DeactivateUser(deactivateId);
                            break;

                        case "4":
                            userDb.DisplayUsers();
                            break;

                        case "5":
                            Environment.Exit(0);
                            break;

                        default:
                            Console.WriteLine("Неверный выбор. Попробуйте снова.");
                            break;

                            

                    }
                }



            }
        }







    }
}
