using System;
using System.IO;
using System.Threading;

namespace PacmanConsole
{
    class Program
    {
        static char[,] map;
        static int pacmanX, pacmanY;
        static string direction = "right";

        static void Main(string[] args)
        {
            LoadMap("map.txt");
            pacmanX = 1;
            pacmanY = 1;

            ConsoleKeyInfo cki;
            do
            {
                DrawMap();
                MovePacman();
                Thread.Sleep(100);

                if (Console.KeyAvailable)
                {
                    cki = Console.ReadKey(true);
                    switch (cki.Key)
                    {
                        case ConsoleKey.UpArrow:
                            direction = "up";
                            break;
                        case ConsoleKey.DownArrow:
                            direction = "down";
                            break;
                        case ConsoleKey.LeftArrow:
                            direction = "left";
                            break;
                        case ConsoleKey.RightArrow:
                            direction = "right";
                            break;
                    }
                }
            }
            while (true);
        }

        static void LoadMap(string fileName)
        {
            string[] lines = File.ReadAllLines(fileName);
            map = new char[lines.Length, lines[0].Length];
            for (int y = 0; y < lines.Length; y++)
            {
                for (int x = 0; x < lines[y].Length; x++)
                {
                    map[y, x] = lines[y][x];
                }
            }
        }

        static void DrawMap()
        {
            Console.Clear();
            for (int y = 0; y < map.GetLength(0); y++)
            {
                for (int x = 0; x < map.GetLength(1); x++)
                {
                    if (x == pacmanX && y == pacmanY)
                    {
                        Console.Write('P');
                    }
                    else
                    {
                        Console.Write(map[y, x]);
                    }
                }
                Console.WriteLine();
            }
        }

        static void MovePacman()
        {
            int newX = pacmanX;
            int newY = pacmanY;

            switch (direction)
            {
                case "up":
                    newY--;
                    break;
                case "down":
                    newY++;
                    break;
                case "left":
                    newX--;
                    break;
                case "right":
                    newX++;
                    break;
            }

            if (newX >= 0 && newX < map.GetLength(1) && newY >= 0 && newY < map.GetLength(0) && map[newY, newX] != '#')
            {
                pacmanX = newX;
                pacmanY = newY;
            }
            else
            {
                ChangeDirection();
            }
        }

        static void ChangeDirection()
        {
            int randomDirection = new Random().Next(4);
            switch (randomDirection)
            {
                case 0:
                    direction = "up";
                    break;
                case 1:
                    direction = "down";
                    break;
                case 2:
                    direction = "left";
                    break;
                case 3:
                    direction = "right";
                    break;
            }
        }
    }
}




