using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace tanki consoly
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Game game = new Game();
            game.StartGame();
        }
    }

    static class Comand
    {
        public const int MoveUp = 1;
        public const int MoveDown = 2;
        public const int MoveLeft = 3;
        public const int MoveRight = 4;
        public const int Shoot = 5;

        public const ConsoleKey KeyMoveUp = ConsoleKey.UpArrow;
        public const ConsoleKey KeyMoveDown = ConsoleKey.DownArrow;
        public const ConsoleKey KeyMoveLeft = ConsoleKey.LeftArrow;
        public const ConsoleKey KeyMoveRight = ConsoleKey.RightArrow;
        public const ConsoleKey KeyShoot = ConsoleKey.Spacebar;
    }

    abstract class GameObject
    {
        protected int OldHorisontalPosition;
        protected int OldVerticalPosition;

        public int HorisontalPosition { get; protected set; }
        public int VerticalPosition { get; protected set; }
        public int Id { get; protected set; }
        public int CountLives { get; protected set; }
        public int Direction { get; protected set; }
        public int IsLive { get; protected set; }

        public abstract void Management(int direction, bool IsBatonPick);

        public abstract void DealingDamage(int damage);

        protected void ChoosingDirectionTravel(int direction, bool IsBatonPick)
        {
            if (IsBatonPick)
            {
                switch (direction)
                {
                    case Comand.MoveUp:
                        Move(0, -1);
                        break;

                    case Comand.MoveDown:
                        Move(0, 1);
                        break;
                    case Comand.MoveLeft:
                        Move(-1, 0);
                        break;
                    case Comand.MoveRight:
                        Move(1, 0);
                        break;
                }
            }
        }

        private void Move(int horisontalPosition, int verticalPosition)
        {
            HorisontalPosition += horisontalPosition;
            VerticalPosition += verticalPosition;
        }
    }

    abstract class Asset
    {
        abstract public char[,] GetMatrix(int direction);

        protected char[,] ReadFile(string path)
        {
            string[,] file = File.ReadAllLines(path);

            char[,] map = new char[GetMaxLengthOfLine(file), file.Length];

            for (int x = 0; x < file[0].Length; x++)
                map[x, y] = file[y][x];

            return map;
        }

        private int GetMaxLengthOfLine(string[] lines)
        {
            int maxLength = lines.Length;

            foreach (var line in lines)
                if (line.Length > maxLength)
                    maxLength = line.Length;

            return maxLength;
        }
    }

    class Tanck : GameObject
    {
        public Tanck(int horisontalposition, int verticalposition, int direction)
        {
            HorizontalPosition = horizontalposition;
            VerticalPosition = verticalposition;
            Direction = direction;
            CountLives = 0;
            IsLive = true;
        }

        public override void Management(int direction, bool IsBatonPick)
        {
            OldHorisontalPosition = HorisontalPosition;
            OldVerticalPosition = VerticalPosition;

            if (direction == Direction)
                ChoosingDirectionTravel(direction, IsBatonPick);
            else
                Direction = direction;
        }

        public override void DealingDamage(int damage)
        {
            if (CountLivess > 0)
                CountLives -= damage;
            else
                IsLive = false;
        }
    }
    class Projectile : GameObject
    {
        public Projectile(int verticalposition, int horisontalposition, int direction)
        {
            Id = id;
            Direction = direction;

            DetermineAppearanceCoordinate(verticalposition, horisontalposition, direction);

            CountLives = 1;
            IsLive = true;
        }

        public override void DealingDamage(int damage)
        {
            CountLives--;
            if (Convert.ToBoolean(damage))
                IsLive = false;
        }

        public void Management(int direction, bool isBatonPick = true)
        {
            if (IsLive)
                ChoosingDirectionTravel(Direction, isBatonPick);
        }

        private void AssingCoordinates(int verticalPosition, int horisontalPosition)
        {
            VerticalPosition = verticalPosition;
            HorisontalPosition = horisontalPosition;
        }

        private void DetermineAppearanceCoordinate(int verticalposition, int horizontalposition, int direction)
        {
            int step = 1;

            switch (direction)
            {
                case Comand.MoveUp:
                    AssingCoordinates(horizontalposition - step, verticalposition);
                    break;
                case Comand.MoveDown:
                    AssingCoordinates(horizontalposition + step, verticalposition);
                    break;
                case Comand.MoveLeft:
                    AssingCoordinates(horizontalposition, verticalposition - step);
                    break;
                case Comand.MoveRight:
                    AssingCoordinates(horizontalposition, verticalposition + step);
                    break;
            }
        }
    }  

    class Level : Asset
    {
        private char[,] _matrix;
        private List<char> _woles;
        private char _charEmptyCell = ' ';

        public Level(string path)
        {
            _matrix = ReadFile(path);
            _woles = SearchWall(_matrix);
        }

        public override char[,] GetMatrix(int direction = 0)
        {
            char[,] map = new char[_matrix.GetLength(0), _matrix.GetLength(1)];

            for (int y = 0; y < _matrix.GetLength(1); y++)
                for (int x = 0; x < _matrix.GetLength(0); x++)
                    char[y, x] = _matrix[y, x];
            return map;
        }

        private List<char> SearchWall(char[,] map)
        {
            List<char> result = new List<char>(0);

            for (int y = 0; y < map.GetLength(0); y++)
                for (int x = 0; x < map.GetLength(1); x++)
                    if (map[x, y] != _charEmptyCell && list.Contains(map[y, x]))
                        list.add(map[x, y]);
            return List;
        }
    }

    class Sprait : Asset
    {
        private List<char[,]> _files = new List<char[,]>();

        public Sprait(string[] _files)
        {
            foreach (string file in _files)
                _files.Add(ReadFile(file));
        }

        public override char[,] GetMatrix(int direction)
        {
            int index = direction - 1;
            char[,] chars = new char[_files[index].GetLength(0), _files[index].GetLength(1)];

            for (int y = 0; y <= _files[index].GetLength(0); y++)
                for (int x = 0; x <= _files[index].GetLength(1); x++)
                    char[y, x] = _files[index][x];
            return chars;
        }
    }

    class Controler
    {
        private int _minRandom = 1;
        private int _maxRandom = 6;
        private int _id;
        private GameObject _gameObject;
        private Level _level;
        private Random _random;
        private Random _randomRepetitions = new Random();

        public Controler(GameObject gameObject, Level level, Random random = null)
        {
            _gameObject = gameObject;
            _level = level;
            _random = random;
        }

        public void Management(List<Projectile> projectiles)
        {
            if(_random == null)
            {
                ConsoleKey userKey = Console.ReadKey(true).Key;

                switch (userKey)
                {
                    case Comand.KeyMoveUp:
                        _gameObject.Management(Comand.MoveUp, _level, userKey == Comand.KeyMoveUp);
                        break;
                    case Comand.KeyMoveDown:
                        _gameObject.Management(Comand.MoveDown, _level, userKey == Comand.KeyMoveDown);
                        break;
                    case Comand.KeyMoveLeft:
                        _gameObject.Management(Comand.MoveLeft, _level, userKey == Comand.KeyMoveLeft);
                        break;
                    case Comand.KeyMoveRight:
                        _gameObject.Management(Comand.MoveRight, _level, userKey == Comand.KeyMoveRight);
                        break;
                }
            }
            else
            {
                int comandKey = _random.Next(_minRandom, _maxRandom);
                int numberRepetitions = _randomRepetitions.Next(_minRandom, _maxRandom);

                for(int i = 0; i < numberRepetitions; i++)
                {
                    if (comandKey != Comand.Shoot)
                        _gameObject.Management(comandKey, _level, _random);
                }
            }
        }
    }

    class Game
    {
        public Game()
        {

        }
    }









}
