using System;
using System.Collections.Generic;
using System.IO;

namespace UsersDB
{
    class User
    {
        public string Username { get; set; }
        public string Password { get; set; }
        public string Email { get; set; }

        public User(string username, string password, string email)
        {
            Username = username;
            Password = password;
            Email = email;
        }
    }

    class UsersDB
    {
        private List<User> users;
        private string dataFile;

        public UsersDB(string dataFile)
        {
            this.dataFile = dataFile;
            users = LoadData();
        }

        private List<User> LoadData()
        {
            if (!File.Exists(dataFile))
                return new List<User>();

            List<User> users = new List<User>();
            string[] lines = File.ReadAllLines(dataFile);
            foreach (string line in lines)
            {
                string[] parts = line.Split(',');
                users.Add(new User(parts[0], parts[1], parts[2]));
            }
            return users;
        }

        public void SaveData()
        {
            using (StreamWriter writer = new StreamWriter(dataFile))
            {
                foreach (User user in users)
                {
                    writer.WriteLine($"{user.Username},{user.Password},{user.Email}");
                }
            }
        }

        public void AddUser(string username, string password, string email)
        {
            users.Add(new User(username, password, email));
            SaveData();
        }

        public User GetUser(string username)
        {
            return users.Find(u => u.Username == username);
        }

        public void DeleteUser(string username)
        {
            users.RemoveAll(u => u.Username == username);
            SaveData();
        }

        public void ListUsers()
        {
            foreach (User user in users)
            {
                Console.WriteLine($"User {user.Username}: {user.Email}");
            }
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            UsersDB db = new UsersDB("users.txt");

            while (true)
            {
                Console.WriteLine("1. Add user");
                Console.WriteLine("2. Get user");
                Console.WriteLine("3. Delete user");
                Console.WriteLine("4. List users");
                Console.WriteLine("5. Exit");
                Console.Write("Choose an option: ");
                int choice = int.Parse(Console.ReadLine());

                switch (choice)
                {
                    case 1:
                        Console.Write("Enter username: ");
                        string username = Console.ReadLine();
                        Console.Write("Enter password: ");
                        string password = Console.ReadLine();
                        Console.Write("Enter email: ");
                        string email = Console.ReadLine();
                        db.AddUser(username, password, email);
                        break;
                    case 2:
                        Console.Write("Enter username: ");
                        username = Console.ReadLine();
                        User user = db.GetUser(username);
                        if (user != null)
                        {
                            Console.WriteLine($"User {username} found: {user.Email}");
                        }
                        else
                        {
                            Console.WriteLine($"User {username} not found");
                        }
                        break;
                    case 3:
                        Console.Write("Enter username: ");
                        username = Console.ReadLine();
                        db.DeleteUser(username);
                        break;
                    case 4:
                        db.ListUsers();
                        break;
                    case 5:
                        return;
                    default:
                        Console.WriteLine("Invalid option");
                        break;
                }
            }
        }
    }
}







































using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization.Formatters.Binary;

namespace StudentDatabase
{
    internal class Program
    {
        static void Main(string[] args)
        {
            StudentDatabase studentDb = new StudentDatabase();
            studentDb.Start();
        }
    }

    [Serializable]
    public abstract class learner
    {
        public string Name { get; set; }
        public int Id { get; set; }
        public bool IsActive { get; set; }

        protected learner(string name, int id, bool isActive)
        {
            Name = name;
            Id = id;
            IsActive = isActive;
        }

        public void Activate()
        {
            IsActive = true;
        }

        public void Deactivate()
        {
            IsActive = false;
        }
    }
    [Serializable]
    public class Student : learner
    {
        public Student(string name, int id, bool isActive)
            : base(name, id, isActive) { }
    }
    public class StudentDatabase
    {
        private List<Student> students = new List<Student>();

        public void LoadData()
        {
            if (File.Exists("students.dat"))
            {
                try
                {
                    using (FileStream fs = new FileStream("students.dat", FileMode.Open, FileAccess.Read))
                    {
                        BinaryFormatter formatter = new BinaryFormatter();
                        students = (List<Student>)formatter.Deserialize(fs);
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Ошибка загрузки данных: {ex.Message}");
                }
            }
        }
        public void SaveData()
        {
            if (students.Any())
            {
                try
                {
                    using (FileStream fs = new FileStream("students.dat", FileMode.Create, FileAccess.Write))
                    {
                        BinaryFormatter formatter = new BinaryFormatter();
                        formatter.Serialize(fs, students);
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Ошибка сохранения данных: {ex.Message}");
                }
            }
        }
        public void AddStudent(Student student)
        {
            students.Add(student);
        }
        public void ActivateStudent(int studentId)
        {
            Student student = students.Find(s => s.Id == studentId);
            if (student != null)
            {
                student.Activate();
                Console.WriteLine("Студент активирован.");
            }
            else
            {
                Console.WriteLine("Студент с таким Id не найден.");
            }
        }
        public void DeactivateStudent(int studentId)
        {
            Student student = students.Find(s => s.Id == studentId);
            if (student != null)
            {
                student.Deactivate();
                Console.WriteLine("Студент деактивирован.");
            }
        }
        public void DisplayStudents()
        {
            foreach (Student student in students)
            {
                Console.WriteLine($"Имя: {student.Name}, Id: {student.Id}, Статус активности: {student.IsActive}");
            }
        }
        public void Start()
        {
            LoadData();

            while (true)
            {
                Console.WriteLine("Выберите задачу:\n1. Добавить нового студента\n2. Активировать студента\n3. Деактивировать студента\n4. Вывести список всех студентов\n5. Выход");
                string choice = Console.ReadLine();

                switch (choice)
                {
                    case "1":
                        Console.WriteLine("Введите имя студента:");
                        string name = Console.ReadLine();

                        Console.WriteLine("Введите Id студента:");
                        int id = Int32.Parse(Console.ReadLine());

                        Console.WriteLine("Введите логический статус студента (true/false):");
                        bool isActive = Boolean.Parse(Console.ReadLine());

                        Student newStudent = new Student(name, id, isActive);
                        AddStudent(newStudent);

                        Console.WriteLine("Студент добавлен!");
                        break;

                    case "2":
                        Console.WriteLine("Введите Id студента для активации:");
                        int activateId = Int32.Parse(Console.ReadLine());
                        ActivateStudent(activateId);
                        break;

                    case "3":
                        Console.WriteLine("Введите Id студента для деактивации:");
                        int deactivateId = Int32.Parse(Console.ReadLine());
                        DeactivateStudent(deactivateId);
                        break;

                    case "4":
                        DisplayStudents();
                        break;

                    case "5":
                        SaveData();
                        Environment.Exit(0);
                        break;

                    default:
                        Console.WriteLine("Неверный выбор. Попробуйте снова.");
                        break;
                }
            }
        }
    }
}
